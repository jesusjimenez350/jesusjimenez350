{
  "service": {
    "service": "api-rest",
    "serviceObject": {
      "name": "api-rest"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.8",
      "environment": {
        "DYNAMODB_TABLE": "api-rest-dev"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:us-east-1:*:table/api-rest-dev"
        }
      ],
      "stage": "dev",
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-rest-dev-create"
            }
          },
          "ListLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-rest-dev-list"
            }
          },
          "GetLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-rest-dev-get"
            }
          },
          "UpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-rest-dev-update"
            }
          },
          "DeleteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-rest-dev-delete"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "api-rest",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-rest-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-rest-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "api-rest",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
<<<<<<< HEAD
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-35b960b4-d86b-42eb-bef9-a86a46ba5925"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "CreateLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ListLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
=======
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
          "CreateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/api-rest/dev/1621685153791-2021-05-22T12:05:53.791Z/api-rest.zip"
              },
              "Handler": "s_create.handler",
=======
                "S3Key": "serverless/api-rest/dev/1621638601747-2021-05-21T23:10:01.747Z/api-rest.zip"
              },
              "Handler": "todos/create.create",
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
              "Runtime": "python3.8",
              "FunctionName": "api-rest-dev-create",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "api-rest-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateLogGroup"
            ]
          },
          "ListLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/api-rest/dev/1621685153791-2021-05-22T12:05:53.791Z/api-rest.zip"
              },
              "Handler": "s_list.handler",
=======
                "S3Key": "serverless/api-rest/dev/1621638601747-2021-05-21T23:10:01.747Z/api-rest.zip"
              },
              "Handler": "todos/list.list",
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
              "Runtime": "python3.8",
              "FunctionName": "api-rest-dev-list",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "api-rest-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListLogGroup"
            ]
          },
          "GetLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/api-rest/dev/1621685153791-2021-05-22T12:05:53.791Z/api-rest.zip"
              },
              "Handler": "s_get.handler",
=======
                "S3Key": "serverless/api-rest/dev/1621638601747-2021-05-21T23:10:01.747Z/api-rest.zip"
              },
              "Handler": "todos/get.get",
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
              "Runtime": "python3.8",
              "FunctionName": "api-rest-dev-get",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "api-rest-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetLogGroup"
            ]
          },
          "UpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/api-rest/dev/1621685153791-2021-05-22T12:05:53.791Z/api-rest.zip"
              },
              "Handler": "s_update.handler",
=======
                "S3Key": "serverless/api-rest/dev/1621638601747-2021-05-21T23:10:01.747Z/api-rest.zip"
              },
              "Handler": "todos/update.update",
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
              "Runtime": "python3.8",
              "FunctionName": "api-rest-dev-update",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "api-rest-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateLogGroup"
            ]
          },
          "DeleteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
<<<<<<< HEAD
                "S3Key": "serverless/api-rest/dev/1621685153791-2021-05-22T12:05:53.791Z/api-rest.zip"
              },
              "Handler": "s_delete.handler",
=======
                "S3Key": "serverless/api-rest/dev/1621638601747-2021-05-21T23:10:01.747Z/api-rest.zip"
              },
              "Handler": "todos/delete.delete",
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
              "Runtime": "python3.8",
              "FunctionName": "api-rest-dev-delete",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "api-rest-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteLogGroup"
            ]
          },
<<<<<<< HEAD
          "ListLambdaVersioni6dVEV1TXSoYtSDdbL36ogiOFMmbqcO4Olaw9XOjFc": {
=======
          "CreateLambdaVersionhZ6F8DpHwiBD68IgcLFZFvE2dG2BLoGPCA6yTOegx8": {
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
<<<<<<< HEAD
                "Ref": "ListLambdaFunction"
              },
              "CodeSha256": "MuCHYXNJhlopqvayglUC/LzpJaSa+VfUpiWeOW0yrcM="
            }
          },
          "GetLambdaVersionjZOYKyIY1157GjVCAQIpSZbWBHVAzrSumyd1ygplU5M": {
=======
                "Ref": "CreateLambdaFunction"
              },
              "CodeSha256": "8q81pogs0+o/kz1Cpv6Axhw3M0B5tgUomLviWrUs+Cw="
            }
          },
          "ListLambdaVersionxlytEe5GOTQvudJrVOgpM08q8lLi10nhyI3F3rBwI": {
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
<<<<<<< HEAD
                "Ref": "GetLambdaFunction"
              },
              "CodeSha256": "MuCHYXNJhlopqvayglUC/LzpJaSa+VfUpiWeOW0yrcM="
            }
          },
          "UpdateLambdaVersionkLdHEg9GtlzT063MiZvUS3qxyQh1z2lF6jmCIUAWrT8": {
=======
                "Ref": "ListLambdaFunction"
              },
              "CodeSha256": "8q81pogs0+o/kz1Cpv6Axhw3M0B5tgUomLviWrUs+Cw="
            }
          },
          "GetLambdaVersiontoPADYmFGkV1hCLe2bTQdXxbmaFhpGFGEAuVrjDWpc": {
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
<<<<<<< HEAD
                "Ref": "UpdateLambdaFunction"
              },
              "CodeSha256": "MuCHYXNJhlopqvayglUC/LzpJaSa+VfUpiWeOW0yrcM="
            }
          },
          "DeleteLambdaVersionFN9uPeUas0tNz2h5y1oVZzZCwMBMojsCjEIY": {
=======
                "Ref": "GetLambdaFunction"
              },
              "CodeSha256": "8q81pogs0+o/kz1Cpv6Axhw3M0B5tgUomLviWrUs+Cw="
            }
          },
          "UpdateLambdaVersionL2wCgW7ifTNebweMi1BhZrIim95vFpq9B9ZTIWDRI": {
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
<<<<<<< HEAD
                "Ref": "DeleteLambdaFunction"
              },
              "CodeSha256": "MuCHYXNJhlopqvayglUC/LzpJaSa+VfUpiWeOW0yrcM="
            }
          },
          "CreateLambdaVersionhJJUlqJ1Oa85DcmeCPAkpklZl1o00PqPMchFP1GBU": {
=======
                "Ref": "UpdateLambdaFunction"
              },
              "CodeSha256": "8q81pogs0+o/kz1Cpv6Axhw3M0B5tgUomLviWrUs+Cw="
            }
          },
          "DeleteLambdaVersiondlIGghRthxb8QypqvrpdMTzo7VBixRo9yXNnTn0ptL4": {
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
<<<<<<< HEAD
                "Ref": "CreateLambdaFunction"
              },
              "CodeSha256": "MuCHYXNJhlopqvayglUC/LzpJaSa+VfUpiWeOW0yrcM="
=======
                "Ref": "DeleteLambdaFunction"
              },
              "CodeSha256": "8q81pogs0+o/kz1Cpv6Axhw3M0B5tgUomLviWrUs+Cw="
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-api-rest",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceTodos": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "todos",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTodosIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTodos"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTodosOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTodosIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodosIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTodosPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTodosGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTodosIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodosIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTodosIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodosIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTodosIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTodosIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
<<<<<<< HEAD
          "ApiGatewayDeployment1621685148447": {
=======
          "ApiGatewayDeployment1621638598233": {
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodTodosOptions",
              "ApiGatewayMethodTodosIdVarOptions",
              "ApiGatewayMethodTodosPost",
              "ApiGatewayMethodTodosGet",
              "ApiGatewayMethodTodosIdVarGet",
              "ApiGatewayMethodTodosIdVarPut",
              "ApiGatewayMethodTodosIdVarDelete"
            ]
          },
          "CreateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
<<<<<<< HEAD
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/api-rest-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "api-rest",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/api-rest/dev/1621685153791-2021-05-22T12:05:53.791Z/custom-resources.zip"
              },
              "FunctionName": "api-rest-dev-custom-resource-apigw-cw-role",
              "Handler": "apiGatewayCloudWatchRole/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs12.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
=======
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
          "TodosDynamoDbTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "api-rest-dev"
            }
<<<<<<< HEAD
          },
          "CloudWatchLogsSubscriptionFilterCreateLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:35b960b4-d86b-42eb-bef9-a86a46ba5925#0cFCt97w6JJhTkqVsF#api-rest#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterListLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:35b960b4-d86b-42eb-bef9-a86a46ba5925#0cFCt97w6JJhTkqVsF#api-rest#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ListLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:35b960b4-d86b-42eb-bef9-a86a46ba5925#0cFCt97w6JJhTkqVsF#api-rest#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterUpdateLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:35b960b4-d86b-42eb-bef9-a86a46ba5925#0cFCt97w6JJhTkqVsF#api-rest#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterDeleteLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:35b960b4-d86b-42eb-bef9-a86a46ba5925#0cFCt97w6JJhTkqVsF#api-rest#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterApiGatewayLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:35b960b4-d86b-42eb-bef9-a86a46ba5925#0cFCt97w6JJhTkqVsF#api-rest#dev",
              "FilterPattern": "\"SLS_ACCESS_LOG\"",
              "LogGroupName": {
                "Ref": "ApiGatewayLogGroup"
              }
            }
=======
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-api-rest-dev-ServerlessDeploymentBucketName"
            }
          },
<<<<<<< HEAD
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            },
            "Export": {
              "Name": "sls-api-rest-dev-EnterpriseLogAccessIamRole"
=======
          "CreateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateLambdaVersionhZ6F8DpHwiBD68IgcLFZFvE2dG2BLoGPCA6yTOegx8"
            },
            "Export": {
              "Name": "sls-api-rest-dev-CreateLambdaFunctionQualifiedArn"
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            }
          },
          "ListLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "ListLambdaVersioni6dVEV1TXSoYtSDdbL36ogiOFMmbqcO4Olaw9XOjFc"
=======
              "Ref": "ListLambdaVersionxlytEe5GOTQvudJrVOgpM08q8lLi10nhyI3F3rBwI"
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            },
            "Export": {
              "Name": "sls-api-rest-dev-ListLambdaFunctionQualifiedArn"
            }
          },
          "GetLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "GetLambdaVersionjZOYKyIY1157GjVCAQIpSZbWBHVAzrSumyd1ygplU5M"
=======
              "Ref": "GetLambdaVersiontoPADYmFGkV1hCLe2bTQdXxbmaFhpGFGEAuVrjDWpc"
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            },
            "Export": {
              "Name": "sls-api-rest-dev-GetLambdaFunctionQualifiedArn"
            }
          },
          "UpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "UpdateLambdaVersionkLdHEg9GtlzT063MiZvUS3qxyQh1z2lF6jmCIUAWrT8"
=======
              "Ref": "UpdateLambdaVersionL2wCgW7ifTNebweMi1BhZrIim95vFpq9B9ZTIWDRI"
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            },
            "Export": {
              "Name": "sls-api-rest-dev-UpdateLambdaFunctionQualifiedArn"
            }
          },
          "DeleteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
<<<<<<< HEAD
              "Ref": "DeleteLambdaVersionFN9uPeUas0tNz2h5y1oVZzZCwMBMojsCjEIY"
=======
              "Ref": "DeleteLambdaVersiondlIGghRthxb8QypqvrpdMTzo7VBixRo9yXNnTn0ptL4"
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
            },
            "Export": {
              "Name": "sls-api-rest-dev-DeleteLambdaFunctionQualifiedArn"
            }
          },
<<<<<<< HEAD
          "CreateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateLambdaVersionhJJUlqJ1Oa85DcmeCPAkpklZl1o00PqPMchFP1GBU"
            },
            "Export": {
              "Name": "sls-api-rest-dev-CreateLambdaFunctionQualifiedArn"
            }
          },
=======
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-api-rest-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
<<<<<<< HEAD
      "logs": {
        "restApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourceId\":\"$context.resourceId\",\"resourcePath\":\"$context.resourcePath\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"authLatency\":\"$context.authorizer.integrationLatency\",\"integrationLatency\":\"$context.integrationLatency\",\"integrationStatus\":\"$context.integrationStatus\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_ACCESS_LOG\",\"version\":\"1.0.0\"}"
        }
      },
=======
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "create": {
<<<<<<< HEAD
        "handler": "s_create.handler",
=======
        "handler": "todos/create.create",
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
        "events": [
          {
            "http": {
              "path": "todos",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "api-rest-dev-create",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "CreateLambdaVersionhJJUlqJ1Oa85DcmeCPAkpklZl1o00PqPMchFP1GBU"
      },
      "list": {
        "handler": "s_list.handler",
=======
        "versionLogicalId": "CreateLambdaVersionhZ6F8DpHwiBD68IgcLFZFvE2dG2BLoGPCA6yTOegx8"
      },
      "list": {
        "handler": "todos/list.list",
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
        "events": [
          {
            "http": {
              "path": "todos",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "api-rest-dev-list",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "ListLambdaVersioni6dVEV1TXSoYtSDdbL36ogiOFMmbqcO4Olaw9XOjFc"
      },
      "get": {
        "handler": "s_get.handler",
=======
        "versionLogicalId": "ListLambdaVersionxlytEe5GOTQvudJrVOgpM08q8lLi10nhyI3F3rBwI"
      },
      "get": {
        "handler": "todos/get.get",
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
        "events": [
          {
            "http": {
              "path": "todos/{id}",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "api-rest-dev-get",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "GetLambdaVersionjZOYKyIY1157GjVCAQIpSZbWBHVAzrSumyd1ygplU5M"
      },
      "update": {
        "handler": "s_update.handler",
=======
        "versionLogicalId": "GetLambdaVersiontoPADYmFGkV1hCLe2bTQdXxbmaFhpGFGEAuVrjDWpc"
      },
      "update": {
        "handler": "todos/update.update",
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
        "events": [
          {
            "http": {
              "path": "todos/{id}",
              "method": "put",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "api-rest-dev-update",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "UpdateLambdaVersionkLdHEg9GtlzT063MiZvUS3qxyQh1z2lF6jmCIUAWrT8"
      },
      "delete": {
        "handler": "s_delete.handler",
=======
        "versionLogicalId": "UpdateLambdaVersionL2wCgW7ifTNebweMi1BhZrIim95vFpq9B9ZTIWDRI"
      },
      "delete": {
        "handler": "todos/delete.delete",
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
        "events": [
          {
            "http": {
              "path": "todos/{id}",
              "method": "delete",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "api-rest-dev-delete",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.8",
        "vpc": {},
<<<<<<< HEAD
        "versionLogicalId": "DeleteLambdaVersionFN9uPeUas0tNz2h5y1oVZzZCwMBMojsCjEIY"
=======
        "versionLogicalId": "DeleteLambdaVersiondlIGghRthxb8QypqvrpdMTzo7VBixRo9yXNnTn0ptL4"
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
      }
    },
    "resources": {
      "Resources": {
        "TodosDynamoDbTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "api-rest-dev"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "app": "todo-list-serverless",
<<<<<<< HEAD
    "org": "jesusjimenez350",
    "layers": {},
    "initialServerlessConfig": {
      "org": "jesusjimenez350",
=======
    "layers": {},
    "initialServerlessConfig": {
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
      "app": "todo-list-serverless",
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": ">=1.1.0",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
<<<<<<< HEAD
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": true,
    "orgUid": "35b960b4-d86b-42eb-bef9-a86a46ba5925",
    "appUid": "0cFCt97w6JJhTkqVsF",
    "artifact": "/home/ec2-user/environment/todo-list-serverless/.serverless/api-rest.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/api-rest/dev/1621685153791-2021-05-22T12:05:53.791Z",
=======
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/home/ec2-user/environment/todo-list-serverless/.serverless/api-rest.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/api-rest/dev/1621638601747-2021-05-21T23:10:01.747Z",
>>>>>>> 66b4c7fc3c27cd378c4eb68cd5bf8d90b9fb4b2e
    "artifact": "api-rest.zip"
  }
}